#!/bin/bash
# ========= Function Section Begin =================================

    export_vars () {
        # == Export Section Begin ===========
                export LANG=en_US
            EASY_RSA="$(find "$HOME" -type l -name pkitool -exec dirname {} \; 2>/dev/null)"
                export EASY_RSA
                export OPENSSL="openssl"
                export PKCS11TOOL="pkcs11-tool"
                export GREP="grep"
            KEY_CONFIG="$(findmaxcnf)"
                export KEY_CONFIG
                export KEY_DIR="$EASY_RSA/keys"
                export PKCS11_MODULE_PATH="dummy"
                export PKCS11_PIN="dummy"
                export KEY_SIZE=2048
                export CA_EXPIRE=3650
                export KEY_EXPIRE=3650
                export KEY_COUNTRY="DC"
                export KEY_PROVINCE="DP"
                export KEY_CITY="DEF_CITY"
                export KEY_ORG="DEF_ORG"
            KEY_EMAIL="$(org_to_email $KEY_ORG)"
                export KEY_EMAIL
                export KEY_OU="DEF_UNIT"
                export KEY_NAME="ovpnserver"
            MAIN_EDITOR="$(sudo update-alternatives --get-selections | grep editor | awk '{print $3}')"
                export MAIN_EDITOR
        # == Export Section End =============
    }

    f_clr () {
        yes "" | head -n "$(tput lines)"
    }
    user_help () {
        case "$1" in
            223|224|225|228)
            echo -e "\\e[1;33mПри использовании опций добавления(add), удаления(del) и модификации(useropt или clientopt)\\n\
            \\rнеобходимо задать имя пользователя для которого производится действие\\e[0m"
            ;;
            226)
            echo -e "\\e[1;33mПользователь с именем $2 удален\\e[0m"
            ;;
            227)
            echo -e "\\e[1;33mПользователь с именем $2 не зарегистрирован\\e[0m"
            ;;
            *)
            echo -e "     \\e[1;35mДля управления OpenVPN сервером используйте команду \\e[1;33mvpn\\e[0m \\e[1;35mсо следующими переметрами:\\e[0m\\n\\n\
            \\r     \\e[1;33madd \"username\"\\e[0m \\t\\t- Добавление нового пользователя\\n\
            \\r     \\e[1;33mdel \"username\"\\e[0m \\t\\t- Удаление и блокировка существующего пользователя\\n\
            \\r     \\e[1;33museropt \"username\"\\e[0m \\t- Редактирование пользовательского профиля\\n\
            \\r     \\e[1;33mclientopt \"username\"\\e[0m \\t- Редактирование файла клиентской части приложения\\n\
            \\r     \\e[1;33monline\\e[0m \\t\\t\\t- Просмотр данных пользователей подключенных в текущий момент к серверу\\n\\n\
            \\r     \\e[1;33mrestart\\e[0m \\t\\t\\t- Перезагрузка сервера (используется, как правило после изменения конфигурации сервера)\\n\
            \\r     \\e[1;33mstop\\e[0m \\t\\t\\t- Остановка OpenVPN сервера\\n\
            \\r     \\e[1;33mstart\\e[0m \\t\\t\\t- Запуск OpenVPN сервера\\n\
            \\r     \\e[1;33medit\\e[0m \\t\\t\\t- Редактирование конфигурации OpenVPN сервера\\n\
            \\r     \\e[1;33mlog\\e[0m \\t\\t\\t- Просмотр лога текущей сессии OpenVPN сервера\\n\
            \\r     \\e[1;33mlog full\\e[0m \\t\\t\\t- Просмотр полного лога OpenVPN сервера\\n\
            \\r\\n\
            \\r\\n\
            \\r\\n\
            "
        esac
        [[ "$1" == "noexit" ]] || exit 100
    }
        # == will be deleted begin ===============
    findmaxcnf (){
            find "$EASY_RSA" -maxdepth 1 -regex ".*openssl-.*.cnf" | while read -r cnf
            do [[ ${maxvers:-0} < "$cnf" ]] && maxvers="$cnf" && echo "$maxvers" > "$EASY_RSA"/mvers
            done
            echo "$(<"$EASY_RSA"/mvers)"
            rm "$EASY_RSA"/mvers
    }
    org_to_email () {
        rslt="$(echo "$1" | tr -d "[:blank:]" | tr -d "[:punct:]" | tr "[:upper:]" "[:lower:]")"
        echo "info@${rslt}.org"
    }
    set_vars (){
        sed -ri "/^ +# == Export Section Begin/,/^ +# == Export Section End/{\
            /^ +EASY_RSA/s/\".*\"/\"${EASY_RSA//\//\\\/}\"/;\
            /^ +KEY_CONFIG/s/\".*\"/\"${KEY_CONFIG//\//\\\/}\"/;\
            /^ +export KEY_DIR/s/\".*\"/\"${KEY_DIR//\//\\\/}\"/;\
            /^ +export KEY_COUNTRY/s/\".*\"/\"$KEY_COUNTRY\"/;\
            /^ +export KEY_PROVINCE/s/\".*\"/\"$KEY_PROVINCE\"/;\
            /^ +export KEY_CITY/s/\".*\"/\"$KEY_CITY\"/;\
            /^ +export KEY_ORG/s/\".*\"/\"$KEY_ORG\"/;\
            /^ +KEY_EMAIL/s/\".*\"/\"$KEY_EMAIL\"/;\
            /^ +export KEY_OU/s/\".*\"/\"$KEY_OU\"/;\
            /^ +export KEY_NAME/s/\".*\"/\"$KEY_NAME\"/;\
            /^ +MAIN_EDITOR/s/\".*\"/\"${MAIN_EDITOR//\//\\\/}\"/\
        }" "$0"
    }
    rand_network () {
        while [ "${match:-0}" -ne 1 ];do
            segment=$(( RANDOM % 253 ))
            if [ $segment -gt 10 ] ;then
                [ "$(( segment / 8 * 8 ))" -eq $segment ] && match=1 && echo $segment
            fi
        done
    }
    check_network () {
        rnd_net_seg_1=$(rand_network)
        rnd_net_seg_2=$(rand_network)
        while ip addr | grep -qE "192.${rnd_net_seg_1}.${rnd_net_seg_2}"; do
            rnd_net_seg_1=$(rand_network)
            rnd_net_seg_2=$(rand_network)
            if ! ip addr | grep -qE "192.$rnd_net_seg_1.$rnd_net_seg_2"; then
                echo "$rnd_net_seg_1.$rnd_net_seg_2"
                return
            fi
        done
        echo "$rnd_net_seg_1.$rnd_net_seg_2"
    }
    make_conf_file () {
        echo -e "mode server\\n\
                proto udp4\\n\
                dev tun\\n\
                port $(while [ "${s:-0}" -ne 1 ];do e=$(( RANDOM % 9999 ));echo $e | grep -qE "^[1-9]{4}$" && s=1 && echo $e;done)\\n\
                sndbuf 0\\n\
                rcvbuf 0\\n\
                tun-mtu 1500\\n\
                topology subnet\\n\
                mssfix 0\\n\
                tls-server\\n\
                ca /etc/openvpn/keys/ca.crt\\n\
                cert /etc/openvpn/keys/$KEY_NAME.crt\\n\
                key /etc/openvpn/keys/$KEY_NAME.key\\n\
                dh /etc/openvpn/keys/dh$KEY_SIZE.pem\\n\
                server 192.$(check_network).0 255.255.255.0\\n\
                ifconfig-pool-persist ipp.txt\\n\
                client-config-dir ccd\\n\
                push \"redirect-gateway def1 bypass-dhcp\"\\n\
                push \"dhcp-option DNS 208.67.222.222\"\\n\
                push \"dhcp-option DNS 208.67.220.220\"\\n\
                # client-to-client\\n\
                keepalive 10 120\\n\
                key-direction 0\\n\
                tls-auth /etc/openvpn/keys/ta.key\\n\
                cipher AES-256-CBC\\n\
                auth SHA384\\n\
                ncp-ciphers AES-256-CBC\\n\
                tls-timeout 3600\\n\
                hand-window 3600\\n\
                user nobody\\n\
                group nogroup\\n\
                persist-key\\n\
                persist-tun\\n\
                status      /var/log/openvpn/openvpn-status.log\\n\
                log         /var/log/openvpn/openvpn_current_session.log\\n\
                log-append   /var/log/openvpn/openvpn.log\\n\
                verb 3\\n\
                mute-replay-warnings\\n\
                # crl-verify /etc/openvpn/crl.pem" | sed -r 's/^[[:cntrl:]]? +//g' | sudo tee /etc/openvpn/"$KEY_NAME".conf > /dev/null
    }
    first_run () {
        f_clr
        echo -en "Вы начинаете установку OpenVPN сервер. Сначала необходимо настроить переменные для генерации ключей.\\n\
            \\rБудут выведены построчно переменные, значения которых необходимо изменить, или оставить по умолчанию нажав клавишу ввод.\\n\
            \\n\
            \\rПриступить к настройке значений? [\\e[1;31my\\e[0m|\\e[1;32mN\\e[0m]]: "
        read -r -n 1 change_vars && echo
        case "$change_vars" in
            Y|y)
                f_clr
        # == <Emulate ./clean-all> ====
                if [ "$KEY_DIR" ]; then
                    rm -rf "$KEY_DIR"
                    mkdir "$KEY_DIR" && \
                        chmod go-rwx "$KEY_DIR" && \
                        touch "$KEY_DIR/index.txt" && \
                        echo 01 > "$KEY_DIR/serial"
                        [ -d /etc/openvpn/keys ] && sudo rm -rf /etc/openvpn/keys
                        find /etc/openvpn/ -maxdepth 1 -name '*.conf' -exec sudo rm -f {} \; 2>/dev/null
                        [ -d /etc/openvpn/ccd ] && sudo rm -rf /etc/openvpn/ccd
                        find /var/log/ -name 'openvpn*' -exec sudo rm -rf {} \; 2>/dev/null
                        [ -d "$KEY_DIR/clients_files" ] && sudo rm -rf "$KEY_DIR/clients_files"
                else
                    echo 'Please source the vars script first (i.e. "source ./vars")'
                    echo 'Make sure you have edited it to reflect your configuration.'
                fi
        # == </Emulate ./clean-all> ====
                sudo apt-get -y install zip lnav > /dev/null&

                while [ "${accepted:-0}" -ne 1 ]; do
                    echo -en "Двухбуквенный код страны\\n\
                    \\rKEY_COUNTRY=\"$KEY_COUNTRY\": "
                        read -r -n 2 key_country
                        [ -z "$key_country" ] || KEY_COUNTRY="$( echo "$key_country"| tr '[:lower:]' '[:upper:]' )"
                        echo
                    echo -en "Двух или трех буквенный код региона\\n\
                    \\rKEY_PROVINCE=\"$KEY_PROVINCE\": "
                        read -r -n 3 key_province
                        [ -z "$key_province" ] || KEY_PROVINCE="$( echo "$key_province"| tr '[:lower:]' '[:upper:]' )"
                        echo
                    echo -en "Название города\\n\
                    \\rKEY_CITY=\"$KEY_CITY\": "
                        read -r key_city
                        [ -z "$key_city" ] || KEY_CITY="${key_city::24}"
                        echo
                    echo -en "Название органицации\\n\
                    \\rKEY_ORG=\"$KEY_ORG\": "
                        read -r key_org
                        [ -z "$key_org" ] || KEY_ORG="${key_org::24}"
                        echo
                    echo -en "Электронные адрес\\n\
                    \\rKEY_EMAIL=\"$(org_to_email "${KEY_ORG::24}")\": "
                        read -r key_email
                        [ -z "$key_email" ] && KEY_EMAIL="$(org_to_email "${KEY_ORG::15}")"
                        [ -z "$key_email" ] || KEY_EMAIL="$key_email"
                        echo
                    echo -en "Название подразделения\\n\
                    \\rKEY_OU=\"$KEY_OU\": "
                        read -r key_ou
                        [ -z "$key_ou" ] || KEY_OU="$key_ou"
                        echo
                    echo -en "Название которое Вы хотите дать своему VPN серверу\\n\
                    \\rKEY_NAME=\"$KEY_NAME\": "
                        read -r key_name
                        [ -z "$key_name" ] || KEY_NAME="${key_name::24}"
                        echo
                    f_clr
                    echo -en "\\e[1;33mБудут установлены следующие значения.\\e[0m\\n\
                    \\r\\n\
                    \\rKEY_COUNTRY=\"$KEY_COUNTRY\"\\n\
                    \\rKEY_PROVINCE=\"$KEY_PROVINCE\"\\n\
                    \\rKEY_CITY=\"$KEY_CITY\"\\n\
                    \\rKEY_ORG=\"$KEY_ORG\"\\n\
                    \\rKEY_EMAIL=\"$KEY_EMAIL\"\\n\
                    \\rKEY_OU=\"$KEY_OU\"\\n\
                    \\rKEY_NAME=\"$KEY_NAME\"\\n\
                    \\n\
                    \\rВы подтверждаете, что все переменные имеют желаемые значения? [\\e[1;31my\\e[0m|\\e[1;32mN\\e[0m]]: "
                    read -r -n 1 answer && echo
                    if [[ "$answer" == "y" ]]; then
                        echo -en "Установить мастер-пароль для управления пользователями OpenVPN сервера? [\\e[1;31my\\e[0m|\\e[1;32mN\\e[0m]]: "
                        read -r -n 1 yespass && echo
                        [[ "$yespass" == "y" ]] && initwithpass="--pass"


                        "$EASY_RSA"/pkitool --initca "$initwithpass"
                        "$EASY_RSA"/pkitool --server "$KEY_NAME"
                        f_clr
                        "$OPENSSL" dhparam -out "${KEY_DIR}/dh${KEY_SIZE}.pem" "${KEY_SIZE}"
                        openvpn --genkey --secret "${KEY_DIR}"/ta.key
                        sudo mkdir -p /etc/openvpn/keys
                        sudo mkdir -p /var/log/openvpn
                        sudo mkdir -p /etc/openvpn/ccd
                        sudo cp "${KEY_DIR}"/{ca.key,ca.crt,ta.key,dh"$KEY_SIZE".pem,"$KEY_NAME".crt,"$KEY_NAME".key} /etc/openvpn/keys || exit 332
                        make_conf_file

                        if sudo systemctl start openvpn@"$KEY_NAME" 2>/dev/null; then
                            sudo systemctl enable openvpn@"$KEY_NAME" >/dev/null 2>&1
                            f_clr
                            echo -e "\\e[1;32m    #=======================================================================\\e[0m\\n\
                            \\r    \\e[1;32m#\\e[0m OpenVPN сервер \\e[1;32m$KEY_NAME\\e[0m установлен и запущен без ошибок\\n\
                            \\r\\e[1;32m    #=======================================================================\\e[0m\\n\\r"
                            accepted=1
                            sudo sed -i '/net.ipv4.ip_forward/s/^#//' /etc/sysctl.conf
                            echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward > /dev/null
                            sudo sysctl -p > /dev/null
                            main_interface="$(ip addr | grep -E "inet.*global.* e\\w+$" | awk '{print $7}')"
                            tun_network="$(sudo grep -E "^server" /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"

                            if sudo uwf status 2>/dev/null | grep -qw active; then
                                sudo sed '/^$/,$d' /etc/ufw/before.rules | tee add_rules_file > /dev/null
                                echo -e "\\n\
                                    # START OPENVPN RULES\\n\
                                    # NAT table rules\\n\
                                    *nat\\n\
                                    :POSTROUTING ACCEPT [0:0] \\n\
                                    # Allow traffic from OpenVPN client to $main_interface\\n\
                                    -A POSTROUTING -s $tun_network/24 -o $main_interface -j MASQUERADE\\n\
                                    COMMIT\\n\
                                    # END OPENVPN RULES\\n\
                                " | sed -r 's/^ +//g' >> add_rules_file
                                sudo sed '1,/^$/d' /etc/ufw/before.rules | tee -a add_rules_file > /dev/null
                                sudo mv /etc/ufw/before.rules{,.bkp}
                                sudo tee /etc/ufw/before.rules < add_rules_file > /dev/null
                                rm add_rules_file
                                sudo ufw allow "$(sudo grep -E "^port" /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"/udp > /dev/null
                                sudo systemctl restart ufw
                            else
                                echo -e "[Unit]\\n\
                                Description=Up nat route for OpenVPN\\n\
                                After=network.target\\n\\n\
                                [Service]\\n\
                                Type=forking\\n\
                                User=root\\n\
                                ExecStart=/sbin/iptables -t nat -A POSTROUTING -s $tun_network/24 -o $main_interface -j MASQUERADE\\n\\n\
                                [Install]\\n\
                                WantedBy=multi-user.target\\n" | sed -r 's/^ +//g' | sudo tee /etc/systemd/system/ovpnroute.service >/dev/null
                                sudo systemctl stop openvpn >/dev/null 2>&1
                                sudo systemctl disable openvpn >/dev/null 2>&1
                                sudo systemctl daemon-reload >/dev/null
                                sudo systemctl enable ovpnroute >/dev/null 2>&1
                                sudo systemctl start ovpnroute >/dev/null
                            fi
                            set_vars
                            sudo systemctl restart openvpn@"$KEY_NAME" 2>/dev/null
                            more "$0" | sed -r '{/^\s+# == will be deleted begin /,/^\s+# == will be deleted end /d;/^\s+# == Section For Remove Begin/,/^\s+# == Section For Remove End/d}' | \
                            sudo tee /usr/local/bin/vpn > /dev/null
                            sudo chmod +x /usr/local/bin/vpn
                            user_help noexit
                            rm -f "$0"
                        else
                            f_clr
                            echo -e "\\e[1;31m===================================================================================================\\e[0m\\n\
                            \\rOpenVPN сервер \\e[1;31m$KEY_NAME\\e[0m Установлен с ошибками\\n\
                            \\rПопробуйте найти ошибку запустив команду \"\\e[1;35msudo lnav /var/log/openvpn/openvpn_current_session.log\\e[0m\"\\n\
                            \\r\\e[1;31m===================================================================================================\\e[0m\\n\\r"
                            exit 1000
                        fi
                    else
                        f_clr
                    fi
                done
                ;;
            *)
                f_clr
                echo -en "Данная настройка необходима для правильной конфигурации OpenVPN.\\n\
                \\rПожалуйста запустите скрип настройки еще раз.\\n\
                \\rНастройка значений производится только один раз, при первом запуске." && echo
                exit 0
                ;;
        esac
        exit 0
    }

    dpkg-query -s easy-rsa 2>/dev/null | grep -iqE "^Status.*installed$" || install_ersa="easy-rsa"
    dpkg-query -s openvpn 2>/dev/null | grep -iqE "^Status.*installed$" || install_ovpn="openvpn"

    if ! [ -z "$install_ersa$install_ovpn" ];then
        sudo apt-get install -y $install_ovpn $install_ersa | while read -r;do
            stage="\\rУстановка $install_ersa $install_ovpn # "
            spaser+="="
            arrow=">"

            [ $(( ${#stage} + ${#spaser} + ${#arrow} )) -ge "$(tput cols)" ] && spaser="="

            full_string="${stage}${spaser}${arrow}"
            echo -en "$full_string"
        done && echo
        [ "$(find "$HOME" -type l -name pkitool | wc -l)" -eq 0 ] && make-cadir "$HOME/vpn-ca"
    fi
    export_vars
    first_run
        # == will be deleted end ===============
    add_user () {
        [ -d "$EASY_RSA/clients_files" ] || mkdir -p "$EASY_RSA/clients_files"
        [ -f "$EASY_RSA/registred_users" ] || touch "$EASY_RSA/registred_users"
        if grep -qE "^$vpnuser:" "$EASY_RSA/registred_users" ;then   # Доработать с учетом ID пользователя
            echo -e "\\e[1;33mПользователь с именем $vpnuser уже зарегистрирован на сервере.\\n\
            \\rВыберите другое имя для регистрируемого пользователя\\e[0m"
            exit 990
        fi
        "$EASY_RSA"/pkitool "$vpnuser"
        CLIENT_DIR="$EASY_RSA/clients_files/$vpnuser"
        OVPN_FILE="$CLIENT_DIR/${vpnuser}_${KEY_NAME}.ovpn"
        mkdir -p "$CLIENT_DIR"
        zip -qj "$CLIENT_DIR/${vpnuser}_${KEY_NAME}_keyset.zip" "$KEY_DIR"/{"$vpnuser".key,"$vpnuser".crt,ta.key,ca.crt}
        echo "$vpnuser:$CLIENT_DIR:active" >> "$EASY_RSA/registred_users"

            REMOTE="$(curl -s -4 https://wtfismyip.com/text)"
            PORT="$(grep -E "^port " /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"
            CIPHER="$(grep -E "^cipher " /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"
            AUTH="$(grep -E "^auth " /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"
            MSSFIX="$(grep -E "^mssfix " /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"
            NCP_CIPHER="$(grep -E "^ncp-ciphers " /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"
            TUN_MTU="$(grep -E "^tun-mtu " /etc/openvpn/"$KEY_NAME".conf | awk '{print $2}')"

        echo -e "
            client\\n\
            dev tun\\n\
            remote $REMOTE $PORT udp\\n\
            auth-nocache\\n\
            float\\n\
            nobind\\n\
            sndbuf 0\\n\
            rcvbuf 0\\n\
            keepalive 10 30\\n\
            explicit-exit-notify 1\\n\
            tun-mtu $TUN_MTU\\n\
            mtu-test\\n\
            mssfix $MSSFIX\\n\
            resolv-retry infinite\\n\
            user nobody\\n\
            group nogroup\\n\
            persist-key\\n\
            persist-tun\\n\
            tls-client\\n\
            tls-timeout 3600\\n\
            hand-window 3600\\n\
            remote-cert-tls server\\n\
            cipher $CIPHER\\n\
            auth $AUTH\\n\
            ncp-ciphers ${NCP_CIPHER}\\n\
            verb 0\\n\
            mute 20
            " > "$OVPN_FILE"
            sed -ri 's/^[[:cntrl:]]? +//g' "$OVPN_FILE"

            cat <(echo -e '<ca>')\
                "$KEY_DIR"/ca.crt\
                <(echo -e '</ca>\n<cert>')\
                "$KEY_DIR/$vpnuser".crt\
                <(echo -e '</cert>\n<key>')\
                "$KEY_DIR/$vpnuser".key\
                <(echo -e '</key>\nkey-direction 1\n<tls-auth>')\
                "$KEY_DIR"/ta.key\
                <(echo -e '</tls-auth>')\
                >> "$OVPN_FILE"
    }
    revok_user () {
        if ! grep -qE "^$vpnuser:" "$EASY_RSA/registred_users" 2>/dev/null;then
            echo -e "\\e[1;33mПользователь с именем $vpnuser не зарегистрирован на сервере.\\e[0m"
            exit 991
        fi
        if [[ "$(awk -F ":" '$1 == user {print $3}' user="$vpnuser" "$EASY_RSA"/registred_users)" == "revoked" ]] ;then
            echo -e "Пользователь с именем $vpnuser был зарегистрирован и заблокирован на сервере."
            exit 992
        fi
        "$EASY_RSA/revoke-full" "$vpnuser"
        sudo cp -f "$KEY_DIR"/crl.pem /etc/openvpn
        sudo chown root:root /etc/openvpn/crl.pem
        sudo sed -ri '/crl-verify/s/^# ?//' /etc/openvpn/"$KEY_NAME".conf
        sed -ri "/^${vpnuser}:/s/active/revoked/"  "$EASY_RSA/registred_users"
        sudo rm -f /etc/openvpn/ccd/"$vpnuser" 2>/dev/null
        rm -rf "$EASY_RSA"/clients_files/"$vpnuser"
        sudo systemctl restart openvpn@"$KEY_NAME"
    }
    restart_vpn () {
        sudo systemctl restart openvpn@"$KEY_NAME"
    }
    stop_vpn () {
        sudo systemctl stop openvpn@"$KEY_NAME"
    }
    start_vpn () {
        sudo systemctl start openvpn@"$KEY_NAME"
    }
    status_vpn () {
        echo -e "\\e[0;35mДля выхода нажмите \"q\""
        sudo systemctl status openvpn@"$KEY_NAME"
    }
# ========= Function Section End ===================================

export_vars
case "$1" in
    add)
        [ -z "$2" ] && user_help 223
        vpnuser="$(echo "$2" | tr -d "[:blank:]" | tr -d "[:punct:]" | tr "[:upper:]" "[:lower:]")"
        add_user
        ;;
    del)
        [ -z "$2" ] && user_help 224
        vpnuser="$2"
        revok_user
        ;;
    restart)
        restart_vpn
        ;;
    start)
        start_vpn
        ;;
    stop)
        stop_vpn
        ;;
    edit)
        echo "$MAIN_EDITOR" | grep -q "nano" && opt="-m"
        sudo "$MAIN_EDITOR" $opt /etc/openvpn/"$KEY_NAME".conf
        ;;
    useropt)
        [ -z "$2" ] && user_help 225
        vpnuser="$2"
        grep -qE "^$2:.*:revoked" "$EASY_RSA"/registred_users 2>/dev/null && user_help 226 "$vpnuser"
        grep -qE "^$2:.*:active" "$EASY_RSA"/registred_users 2>/dev/null || user_help 227 "$vpnuser"

        echo "$MAIN_EDITOR" | grep -q "nano" && opt="-m"
        sudo "$MAIN_EDITOR" $opt /etc/openvpn/ccd/"$2"
        ;;
    clientopt)
        [ -z "$2" ] && user_help 228
        vpnuser="$2"
        grep -qE "^$2:.*:revoked" "$EASY_RSA"/registred_users 2>/dev/null && user_help 226 "$vpnuser"
        grep -qE "^$2:.*:active" "$EASY_RSA"/registred_users 2>/dev/null || user_help 227 "$vpnuser"

        echo "$MAIN_EDITOR" | grep -q "nano" && opt="-m"
        sudo "$MAIN_EDITOR" $opt "$EASY_RSA"/clients_files/"$2"/"$2"_"$KEY_NAME".ovpn
        ;;
    log)
        if [[ "$2" == "full" ]];then
            sudo lnav /var/log/openvpn/openvpn.log
        else
            sudo lnav /var/log/openvpn/openvpn_current_session.log
        fi
        ;;
    online)
        sudo lnav /var/log/openvpn/openvpn-status.log
        ;;
        status)
        status_vpn
        ;;
        *)
        user_help
        ;;
esac
