#!/bin/bash
help_err () {
    exit_param=0
    case "$1" in
        1) exit_param='1'
            ;;
        no_ext_ip) printf '%s\n' 'Не удалось определить внешний IP адрес.'
            exit_param='2'
            ;;
        no_interface) printf '%s\n'   'Не удалось определить интерфейс для выхода в интернет.' \
                                      'Убедитесь что компьютер имеет выход в Интернет'
            exit_param='3'
            ;;
    esac
    exit "$exit_param"
}
get_vars () {
           VPN_DIR='/etc/openvpn'
           VPN_KEYS="${VPN_DIR}/keys"
           VPN_LOG_DIR='/var/log/openvpn'
    export LANG="en_US.UTF-8"
    export EASY_RSA="/etc/openvpn-ca"
    export OPENSSL="openssl"
    export PKCS11TOOL="pkcs11-tool"
    export GREP="grep"
    export KEY_CONFIG="$EASY_RSA/openssl-1.0.0.cnf"
    export KEY_DIR="$EASY_RSA/keys"
    export PKCS11_MODULE_PATH="dummy"
    export PKCS11_PIN="dummy"
    export KEY_SIZE=2048
    export CA_EXPIRE=3650
    export KEY_EXPIRE=3650
    export KEY_COUNTRY
            KEY_COUNTRY="$(curl --silent https://ipinfo.io/country)"
            [[ -z "${KEY_COUNTRY}" ]] && KEY_COUNTRY="DC"
    export KEY_PROVINCE
            KEY_PROVINCE="$(curl --silent https://ipinfo.io/region)"
            [[ -z "${KEY_PROVINCE}" ]] && KEY_PROVINCE="Default Region"
    export KEY_CITY
            KEY_CITY="$(curl --silent https://ipinfo.io/city)"
            [[ -z "${KEY_CITY}" ]] && KEY_CITY="Default City"
    export KEY_ORG="Private Network"
    export KEY_EMAIL="vpn@privatenet.${KEY_COUNTRY,,}"
    export KEY_OU="Main Unit"
    export KEY_NAME="${HOSTNAME// /}"
            MAIN_EDITOR=$(update-alternatives --get-selections | awk '$1 == "editor" {print $3}')
    export PATH="$EASY_RSA:$PATH"
            EXT_IP="$(curl --silent https://ipinfo.io/ip)" || help_err 'no_ext_ip'
            EXT_INTERFACE="$(ext_interface)"
            VPN_PORT="$(gen_port)"
            NETWORK="$(gen_network)"
            VPN_USERS_DIR="${HOME}/vpn_users"
}
get_packages () {
    dpkg-query -s openvpn 2>/dev/null | grep -qE "^Status.*installed$" || packages+=( "openvpn" )
    dpkg-query -s easy-rsa 2>/dev/null | grep -qE "^Status.*installed$" || packages+=( "easy-rsa" )
    dpkg-query -s lnav 2>/dev/null | grep -qE "^Status.*installed$" || packages+=( "lnav" )
    dpkg-query -s zip 2>/dev/null | grep -qE "^Status.*installed$" || packages+=( "zip" )
    dpkg-query -s curl 2>/dev/null | grep -qE "^Status.*installed$" || packages+=( "curl" )
    dpkg-query -s net-tools 2>/dev/null | grep -qE "^Status.*installed$" || packages+=( "net-tools" )
    [[ -z "${packages[*]}" ]] || sudo apt-get -y install "${packages[@]}" > /dev/null 2>&1
}
make_ca () {
    sudo rm -rf "${EASY_RSA}" 2>/dev/null

    sudo make-cadir "${EASY_RSA}"
    sudo chown -R $UID:$UID "${EASY_RSA}"
    mkdir "${KEY_DIR}" && \
        chmod go-rwx "${KEY_DIR}" && \
        touch "${KEY_DIR}/index.txt" && \
        echo 01 > "${KEY_DIR}/serial"
}
ext_interface () {
    # $(netstat -i | tail +3 | awk '$1 != "lo" {print $1}')
    for interface in $(ip addr | awk '$1 == "inet" && $NF != "lo" {print $NF}')
    do
        ping -c1 -W2 -I "$interface" 208.67.222.222 >/dev/null 2>&1 && printf '%s' "$interface" && return
    done
}
gen_network () {
    while [[ "${original_network:-0}" -ne 1 ]]; do
        until [[ "$seg_1" -eq 10 ]] || [[ "$seg_1" -eq 172 ]] || [[ "$seg_1" -eq 192 ]]; do
            seg_1=$(( RANDOM %254 ))
        done
        case "$seg_1" in
            10)
                seg_2=$(( RANDOM %254 ))
                ;;
            172)
                until [[ "${seg_2:-0}" -ge 16 ]]; do
                    seg_2=$(( RANDOM %32 ))
                done
                ;;
            192)
                    seg_2=168
                ;;
        esac

        while [[ "${seg_3:-0}" -lt 2 ]]; do
            seg_3=$(( RANDOM %254 ))
        done
        cont_network="$(printf '%s' "${seg_1}.${seg_2}.${seg_3}")"

        ip addr | grep -wq "$cont_network" || \
            original_network=1 && \
            printf '%s' "${seg_1}.${seg_2}.${seg_3}".'0'
    done
}
set_vars () {
  until [[ ${lets_go:-0} -eq 1 ]]; do
      clear
      printf '%b\n' '=============================================' \
                    "[    KEY_COUNTRY=\"$KEY_COUNTRY\"" \
                    "[    KEY_PROVINCE=\"$KEY_PROVINCE\"" \
                    "[    KEY_CITY=\"$KEY_CITY\"" \
                    "[    KEY_ORG=\"$KEY_ORG\"" \
                    "[    KEY_EMAIL=\"$KEY_EMAIL\"" \
                    "[    KEY_OU=\"$KEY_OU\"" \
                    "[    KEY_NAME=\"$KEY_NAME\"" \
                    '============================================='
      printf '%b' '\e[1B' '=============================================' '\e[1F' '[    '
      read -r -i 'y' -e -p 'Chenge a values of variables ?: ' -n 1 REPLAY
      case ${REPLAY::1} in
          y|Y) until [[ ${#key_country} -eq 2 ]]; do
                   printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
                   read -r -i "$KEY_COUNTRY" -e -p '[    KEY_COUNTRY=' key_country
               done
               KEY_COUNTRY="${key_country^^}"
               unset key_country
               printf '%b' '\e[2;1H' "[    KEY_COUNTRY=\"$KEY_COUNTRY\""

               until [[ ${#key_province} -ge 2 ]]; do
                   printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
                   read -r -i "$KEY_PROVINCE" -e -p '[    KEY_PROVINCE=' key_province
               done
               KEY_PROVINCE="${key_province^}"
               unset key_province
               printf '%b%*s%b' '\e[3;1H' "$(tput cols)" ' ' '\e[3;1H'
               printf '%b' "[    KEY_PROVINCE=\"$KEY_PROVINCE\""

               until [[ ${#key_city} -ge 2 ]]; do
                   printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
                   read -r -i "$KEY_CITY" -e -p '[    KEY_CITY=' key_city
               done
               KEY_CITY="${key_city^}"
               unset key_city
               printf '%b%*s%b' '\e[4;1H' "$(tput cols)" ' ' '\e[4;1H'
               printf '%b' "[    KEY_CITY=\"$KEY_CITY\""

               until [[ ${#key_org} -ge 2 ]]; do
                   printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
                   read -r -i "$KEY_ORG" -e -p '[    KEY_ORG=' key_org
               done

               KEY_ORG="${key_org}"
               unset key_org
               printf '%b%*s%b' '\e[5;1H' "$(tput cols)" ' ' '\e[5;1H'
               printf '%b' "[    KEY_ORG=\"$KEY_ORG\""

               until [[ ${#key_email} -ge 6 ]]; do
                   printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
                   read -r -i "$KEY_EMAIL" -e -p '[    KEY_EMAIL=' key_email
               done
               KEY_EMAIL="${key_email,,}"
               unset key_email
               printf '%b%*s%b' '\e[6;1H' "$(tput cols)" ' ' '\e[6;1H'
               printf '%b' "[    KEY_EMAIL=\"$KEY_EMAIL\""

               until [[ ${#key_ou} -ge 6 ]]; do
                   printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
                   read -r -i "$KEY_OU" -e -p '[    KEY_OU=' key_ou
               done
               KEY_OU="${key_ou}"
               unset key_ou
               printf '%b%*s%b' '\e[7;1H' "$(tput cols)" ' ' '\e[7;1H'
               printf '%b' "[    KEY_OU=\"$KEY_OU\""

               until [[ ${#key_name} -ge 6 ]]; do
                   printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
                   read -r -i "$KEY_NAME" -e -p '[    KEY_NAME=' key_name
               done
               KEY_NAME="${key_name}"
               unset key_name
               printf '%b%*s%b' '\e[8;1H' "$(tput cols)" ' ' '\e[8;1H'
               printf '%b' "[    KEY_NAME=\"$KEY_NAME\""

               printf '%b%*s%b' '\e[10;1H' "$(tput cols)" ' ' '\e[10;1H'
               read -r -i 'y' -e -p '[    Save current values and continue? ' REPLAY
               case ${REPLAY::1} in
                  y|Y) lets_go=1 ;;
                  *) lets_go=0 ;;
               esac
          ;;
          *) lets_go=1 ;;
      esac
  done
  clear
}
gen_port () {
  mapfile -t list_used_ports <<< \
      "$(netstat -atn | tail +3 | awk '{print $4}' | awk -F ':' '{print $NF}' | sort | uniq)"

  list_used_ports+=( 8080 1000 2121 8888 2222 2323 5353 )
  while [[ "${get_new_port:-1}" -ne 0 ]]; do
      port=$(( RANDOM % 9999 ))
      [[ "${#port}" -eq 4 ]] && \
          printf '%s' "${list_used_ports[*]}" | grep -qv "$port" && \
          get_new_port=0 && \
          printf '%s' "$port"
  done
}
make_config () { # == Создание файла конфигурации сервера
  find "${VPN_DIR}" -type f ! -regex ".*update-resolv-conf$" -exec rm -f {} \; 2>/dev/null
  sudo rm -rf "$VPN_LOG_DIR" 2>/dev/null
  sudo systemctl stop openvpn > /dev/null 2>&1 && sudo systemctl disable openvpn > /dev/null 2>&1

  xenial='16.04'
  if [[ "$(lsb_release -rs)" > "$xenial" ]]; then
      explicit_exit_notify='explicit-exit-notify 1'
      ncp_ciphers='ncp-ciphers AES-256-CBC'
  fi

  printf '%b\n' 'mode server' \
      'proto udp' \
      'dev tun' \
      'mtu-test' \
      "port ${VPN_PORT}" \
      'sndbuf 0' \
      'rcvbuf 0' \
      'mssfix 0' \
      'topology subnet' \
      "$explicit_exit_notify" \
      'tls-server' \
      "ca ${VPN_KEYS}/ca.crt" \
      "cert ${VPN_KEYS}/${KEY_NAME}.crt" \
      "key ${VPN_KEYS}/${KEY_NAME}.key" \
      "dh ${VPN_KEYS}/dh${KEY_SIZE}.pem" \
      "server ${NETWORK} 255.255.255.0" \
      "ifconfig-pool-persist ${VPN_DIR}/ipp.txt" \
      "client-config-dir ${VPN_DIR}/ccd" \
      'push "redirect-gateway def1 bypass-dhcp"' \
      'push "dhcp-option DNS 208.67.222.222"' \
      'push "dhcp-option DNS 208.67.220.220"' \
      'client-to-client' \
      'keepalive 5 20' \
      'key-direction 0' \
      "tls-auth ${VPN_KEYS}/ta.key" \
      'cipher AES-256-CBC' \
      'auth SHA384' \
      "$ncp_ciphers" \
      'user nobody' \
      'group nogroup' \
      'persist-key' \
      'persist-tun' \
      "status      ${VPN_LOG_DIR}/openvpn-status.log" \
      "log         ${VPN_LOG_DIR}/openvpn_current_session.log" \
      "# log-append   ${VPN_LOG_DIR}/openvpn.log" \
      'verb 3' \
      'mute-replay-warnings' \
      'mute 20' | \
      sudo tee "${VPN_DIR}/${KEY_NAME}.conf" > /dev/null 2>&1

  sudo mkdir -p "${VPN_LOG_DIR}"
  sudo mkdir -p "${VPN_DIR}/ccd"

  : | sudo tee "${VPN_DIR}/ipp.txt"
  sudo chgrp nogroup "${VPN_DIR}/ipp.txt"
  sudo chmod 660 "${VPN_DIR}/ipp.txt"
}
gen_server_keys () {
    clear
    read -r -i 'y' -e -p 'Установить пароль для управления ключами?: ' REPLAY
    if [[ "${REPLAY::1}" == 'y' ]] || [[ "${REPLAY::1}" == 'Y' ]]; then
        initwithpass='--pass'
    fi
    pkitool --initca ${initwithpass}
    pkitool --server "${KEY_NAME}"
    openssl dhparam -out "${KEY_DIR}/dh${KEY_SIZE}.pem" "${KEY_SIZE}"
    openvpn --genkey --secret "${KEY_DIR}"/ta.key

    sudo mkdir -p "${VPN_KEYS}"
    sudo cp "${KEY_DIR}"/{"${KEY_NAME}".{crt,key},ca.{crt,key},dh"${KEY_SIZE}".pem,ta.key} "${VPN_KEYS}"
}
configure_routes () {
    if sudo uwf status 2>/dev/null | grep -qw active; then
        sudo sed '/^$/,$d' /etc/ufw/before.rules | tee add_rules_file > /dev/null
        ufw_rule="$( printf '%s' '# START OPENVPN RULES\n' \
                      '# NAT table rules\n' \
                      '*nat\n' \
                      ':POSTROUTING ACCEPT [0:0]\n' \
                      "# Allow traffic from OpenVPN client to ${EXT_INTERFACE}\\n" \
                      "-A POSTROUTING -s ${NETWORK}/24 -o ${EXT_INTERFACE} -j MASQUERADE\\n" \
                      'COMMIT\n' \
                      '# END OPENVPN RULES\n')"
        sudo sed -i "0,/^$/{/^$/a$ufw_rule
                }"

        sudo ufw allow "${VPN_PORT}"/udp > /dev/null
        sudo sed -i '/DEFAULT_FORWARD_POLICY/s/".*"/"ACCEPT"/' /etc/default/ufw
        printf '%s\n' 'net/ipv4/ip_forward=1' 'net/ipv4/icmp_echo_ignore_all=1' | sudo tee -a /etc/ufw/sysctl.conf
        sudo systemctl restart ufw
    else
        printf '%b\n' '[Unit]' \
                'Description=Up nat rule for OpenVPN' \
                'After=network.target' \
                '' \
                '[Service]' \
                'Type=forking' \
                'User=root' \
                "ExecStart=/sbin/iptables -t nat -A POSTROUTING -s ${NETWORK}/24 -o ${EXT_INTERFACE} -j MASQUERADE" \
                '' \
                '[Install]' \
                'WantedBy=multi-user.target' | \
        sudo tee /etc/systemd/system/ovpnroute.service >/dev/null
        printf '%s\n' 'net.ipv4.ip_forward=1' 'net.ipv4.icmp_echo_ignore_all=1' | sudo tee -a /etc/sysctl.conf > /dev/null
        sudo sysctl -p > /dev/null
    fi
    sudo systemctl stop openvpn >/dev/null 2>&1
    sudo systemctl disable openvpn >/dev/null 2>&1
    sudo systemctl daemon-reload >/dev/null
    sudo systemctl enable ovpnroute >/dev/null 2>&1
    sudo systemctl start ovpnroute >/dev/null
    sudo systemctl enable openvpn@"${KEY_NAME}" >/dev/null 2>&1
    sudo systemctl start openvpn@"${KEY_NAME}" >/dev/null 2>&1
}
make_manager () {
    sudo rm -f /usr/local/bin/vpn 2>/dev/null
    printf '%b\n' \
        '#!/bin/bash' \
        "native_lang=\$LANG" \
        'def_vars () {' \
        '           VPN_DIR="/etc/openvpn"' \
        '           VPN_LOG_DIR="/var/log/openvpn"' \
        '    export LANG="en_US.UTF-8"' \
        '    export EASY_RSA="/etc/openvpn-ca"' \
        '    export OPENSSL="openssl"' \
        '    export PKCS11TOOL="pkcs11-tool"' \
        '    export GREP="grep"' \
        "    export KEY_CONFIG=\"$EASY_RSA/openssl-1.0.0.cnf\"" \
        "    export KEY_DIR=\"$EASY_RSA/keys\"" \
        '    export PKCS11_MODULE_PATH="dummy"' \
        '    export PKCS11_PIN="dummy"' \
        "    export KEY_SIZE=${KEY_SIZE}" \
        '    export CA_EXPIRE=3650' \
        '    export KEY_EXPIRE=3650' \
        "    export KEY_COUNTRY=\"${KEY_COUNTRY}\"" \
        "    export KEY_PROVINCE=\"${KEY_PROVINCE}\"" \
        "    export KEY_CITY=\"${KEY_CITY}\"" \
        "    export KEY_ORG=\"${KEY_ORG}\"" \
        "    export KEY_EMAIL=\"${KEY_EMAIL}\"" \
        "    export KEY_OU=\"${KEY_OU}\"" \
        "    export KEY_NAME=\"${KEY_NAME}\"" \
        "           MAIN_EDITOR=\"${MAIN_EDITOR}\"" \
        "    export PATH=\"\$EASY_RSA:\$PATH\"" \
        "           EXT_IP=\"${EXT_IP}\"" \
        "           VPN_PORT=\"${VPN_PORT}\"" \
        "           VPN_USERS_DIR=\"${VPN_USERS_DIR}\"" \
        '}' | sudo tee /usr/local/bin/vpn > /dev/null

    sed -rn '/^#.*TO_MANAGER/,/^#.*TO_MANAGER_END/p' "$0" | sed -r '/TO_MANAGER|TO_MANAGER_END/d' | \
        sed -r 's/^# //' | sudo tee -a /usr/local/bin/vpn > /dev/null
        sudo chmod +x /usr/local/bin/vpn
}

get_vars
set_vars
get_packages
make_ca
gen_server_keys
make_config
configure_routes
make_manager

# # ======= TO_MANAGER ==============
# check_user () { # == Проверка наличия пользователя среди зарегистрированных и удаленных
#     u_name="$1"
#     condition="$(grep -w "CN=$u_name" "${KEY_DIR}"/index.txt | awk '{print $1}')"
#     case "$condition" in
#         V) printf '%s' 'active' ;;
#         R) printf '%s' 'blocked' ;;
#         *) printf '%s' 'not_registred' ;;
#     esac
#     unset u_name condition
# }
# help_err () { # == Обработчик ошибок
#     case "$1" in
#         1) printf '%b\n' '  Для управления OpenVPN используте команду \e[1;33mvpn\e[m со следующими опциями:' \
#                          '=============================================================================================' \
#                          '  \e[1;33madd [username]\e[m \t- Добавление пользователя, ' \
#                          '  \t\t\t    создание фалов профиля и ключей пользователя;' \
#                          '  \e[1;33mblock [username]\e[m\t- Блокировка ключей пользователя, ' \
#                          '  \t\t\t    удаление файлов профиля и ключей пользователя;' \
#                          '  \e[1;33museropt [username]\e[m\t- Редактирование дополнительных параметров' \
#                          '  \t\t\t    подключения пользователя;' \
#                          '  \e[1;33muserprof [username]\e[m\t- Редактирование файла профиля пользователя;' \
#                          '  \e[1;33monline\e[m\t\t- Вывод информации о подключенных, в данный момент, пользователях;' \
#                          '  \e[1;33musers\e[m\t\t\t- Вывод информации о зарегистрированных пользователях;' \
#                          '  \e[1;33mstart\e[m\t\t\t- Запуск OpenVPN сервера;' \
#                          '  \e[1;33mstop\e[m\t\t\t- Остановка OpenVPN сервера;' \
#                          '  \e[1;33mrestart\e[m\t\t- Перезапуск OpenVPN сервера;' \
#                          '  \e[1;33mstatus\e[m\t\t- Проверка состояния OpenVPN сервера;' \
#                          '  \e[1;33mconfig\e[m\t\t- Редактирование файла конфигурации OpenVPN сервера;' \
#                          '  \e[1;33mlog\e[m\t\t\t- Просмотр лог-файла текщей сессии сервера.' \
#                          '============================================================================================='
#             ;;
#         2) printf '%b\n' "Необходимо указать имя пользователя." ;;
#         3) printf '%b\n' "Пользователь \\e[1;33m${2}\\e[m был ранее зарегистрирован для OpenVPN ${KEY_NAME}." \
#                         "В данный момент пользователь \\e[1;33m${2}\\e[m имеет статус \\e[1;35m${3}\\e[m." ;;
#         4) printf '%b\n' "Пользователь \\e[1;33m${2}\\e[m не зарегистрирован на сервере ${KEY_NAME}."
#     esac
#     exit "$1"
# }
# add_user () { # == Добавление пользователя, создание ключей, профиля и файла настройки клиента пользователя +
#     user_name="$1"
#     [[ -z "$user_name" ]] && help_err '2'
#     status="$(check_user "$user_name")"
#     case "$status" in
#         not_registred)  pkitool "$user_name"
#                         ;;
#         *) help_err '3' "$user_name" "$status" ;;
#     esac
#     CLIENT_DIR="${VPN_USERS_DIR}/$user_name"
#     mkdir -p "${CLIENT_DIR}"

#     OVPN_FILE="${CLIENT_DIR}/${user_name}_${KEY_NAME}.ovpn"

#     zip -qj "${CLIENT_DIR}/${user_name}_${KEY_NAME}_keyset.zip" \
#         "${KEY_DIR}"/{"$user_name".key,"$user_name".crt,ta.key,ca.crt}

#     CIPHER="$(awk '$1 == "cipher" {print $2}' "${VPN_DIR}/${KEY_NAME}.conf")"
#     AUTH="$(awk '$1 == "auth" {print $2}' "${VPN_DIR}/${KEY_NAME}.conf")"

#     printf '%s\n' \
#         'client' \
#         'pull' \
#         'dev tun' \
#         "remote ${EXT_IP} ${VPN_PORT} udp" \
#         'auth-nocache' \
#         'float' \
#         'nobind' \
#         'sndbuf 0' \
#         'rcvbuf 0' \
#         'mssfix 0' \
#         'persist-tun' \
#         'persist-key' \
#         'keepalive 10 30' \
#         'explicit-exit-notify 1' \
#         'resolv-retry infinite' \
#         'tls-client' \
#         'remote-cert-tls server' \
#         "cipher ${CIPHER}" \
#         "auth ${AUTH}" \
#         'verb 3' \
#         'mute 20' \
#         '' \
#         '<ca>' \
#         "$(cat "${KEY_DIR}"/ca.crt)" \
#         '</ca>' \
#         '<cert>' \
#         "$(cat "${KEY_DIR}/$user_name".crt)" \
#         '</cert>' \
#         '<key>' \
#         "$(cat "${KEY_DIR}/$user_name".key)" \
#         '</key>' \
#         'key-direction 1' \
#         '<tls-auth>' \
#         "$(cat "$KEY_DIR"/ta.key)" \
#         '</tls-auth>' > "${OVPN_FILE}"
#     unset OVPN_FILE CIPHER AUTH user_name status CLIENT_DIR
# }
# revok_user () { # == Удаление пользователя, отзыв ключей, обновление файла базы отозваных ключей +
#     CRL="$KEY_DIR/crl.pem"
#     RT="$KEY_DIR/revoke-test.pem"
#     user_name="$1"

#     [[ -z "$user_name" ]] && help_err '2'
#     status="$(check_user "$user_name")"
#     case "$status" in
#         not_registred) help_err 4 "$user_name" ;;
#         blocked) help_err 3 "$user_name" "$status" ;;
#         *)
#             CLIENT_DIR="${VPN_USERS_DIR}/$user_name"
#             rm -f "$RT"

#             key_name="${KEY_NAME}"
#             # set defaults
#             export KEY_CN=""
#             export KEY_OU=""
#             export KEY_NAME=""

#             # required due to hack in openssl.cnf that supports Subject Alternative Names
#             export KEY_ALTNAMES=""

#             # revoke key and generate a new CRL
#             $OPENSSL ca -revoke "$KEY_DIR/${user_name}.crt" -config "$KEY_CONFIG"

#             # generate a new CRL -- try to be compatible with
#             # intermediate PKIs
#             $OPENSSL ca -gencrl -out "$CRL" -config "$KEY_CONFIG"
#             if [ -e "$KEY_DIR/export-ca.crt" ]; then
#                 cat "$KEY_DIR/export-ca.crt" "$CRL" >"$RT"
#             else
#                 cat "$KEY_DIR/ca.crt" "$CRL" >"$RT"
#             fi

#             # verify the revocation
#             $OPENSSL verify -CAfile "$RT" -crl_check "$KEY_DIR/${user_name}.crt"

#             KEY_NAME="${key_name}"
#             if [[ ! -e  "${VPN_DIR}/crl.pem" ]]; then
#                 sudo ln "$CRL" "${VPN_DIR}"
#                 chgrp nogroup "$CRL"
#                 chmod 640 "$CRL"
#                 printf '%s\n' "crl-verify ${VPN_DIR}/crl.pem" | sudo tee -a "${VPN_DIR}/${KEY_NAME}.conf"
#                 restart_vpn
#             fi

#             rm -r "${CLIENT_DIR}"
#             sudo rm -f "${VPN_DIR}/ccd/$user_name"
#             unset RT CRL user_name CLIENT_DIR
#             ;;
#     esac
# }
# restart_vpn () { # == Рестарот OpenVPN сервера +
#     sudo systemctl restart openvpn@"${KEY_NAME}"
#     return "$?"
# }
# start_vpn () { # == Запуск OpenVPN сервера +
#     sudo systemctl start openvpn@"${KEY_NAME}"
# }
# stop_vpn () { # == Остановка OpenVPN сервера +
#     sudo systemctl stop openvpn@"${KEY_NAME}"
# }
# vpn_config_edit () { # == Редактирование файла конфигурации OpenVPN сервера +
#     check="$(sha256sum "${VPN_DIR}/${KEY_NAME}.conf" | awk '{print $1}')"
#     sudo "${MAIN_EDITOR}" "${VPN_DIR}/${KEY_NAME}.conf"
#     if [[ "$check" != "$(sha256sum "${VPN_DIR}/${KEY_NAME}.conf" | awk '{print $1}')" ]]; then
#             read -r -i 'y' -e -p 'Перезапустить OpenVPN сервер?: ' -n 1 REPLAY
#             case "${REPLAY,,}" in
#                 y) if restart_vpn; then
#                         printf '%b' '\e[32m' 'Конфигурация успешно обновлена' '\e[m\n'
#                     else
#                         printf '%b' '\e[31m' 'Внесены некорректные изменения\n' 'Исправьте ошибки файла конфигурации\n' \
#                         'OpenVPN сервер остановлен и находится в нерабочем состоянии' '\e[m\n'
#                     fi
#                     ;;
#             esac
#     fi
#     unset check
# }
# user_options_edit () { # == Редактирование файла пользовательских настроек в ccd
#     user_name="$1"
#     status="$(check_user "$user_name")"
#     case "$status" in
#         active) USER_OPT_FILE="${VPN_DIR}/ccd/$user_name"
#                 sudo "${MAIN_EDITOR}" "${USER_OPT_FILE}"
#                 ;;
#         not_registred) help_err '4' "$user_name" ;;
#         *) help_err '3' "$user_name" "$status" ;;
#     esac
# }
# user_profile_edit () { # == Редактирование файла настроек удаленного пользователя
#     user_name="$1"
#     status="$(check_user "$user_name")"
#     case "$status" in
#         active) OVPN_FILE="${VPN_USERS_DIR}/$user_name/${user_name}_${KEY_NAME}.ovpn"
#                 "${MAIN_EDITOR}" "${OVPN_FILE}"
#                 ;;
#         not_registred) help_err '4' "$user_name" ;;
#         *) help_err '3' "$user_name" "$status" ;;
#     esac
# }
# show_vpn_log () { # == Вывод через lnav логфайла OpenVPN сервера
#     sudo lnav "${VPN_LOG_DIR}/openvpn_current_session.log"
# }
# show_online () { # == Вывод списка подключенных клиентов
#     sudo cat "${VPN_LOG_DIR}/openvpn-status.log"
# }
# show_vpn_status () { # == Вывод статуса OpenVPN сервера
#     sudo systemctl status openvpn@"${KEY_NAME}"
# }
# show_users () {
#     printf '%s\n' ''
#     for string in $( sudo awk -F ',' '{print $1}' "${VPN_DIR}"/ipp.txt ); do
#         [[ "${#string}" -gt "${longest_string:-0}" ]] && longest_string="${#string}"
#     done
#     width_first_field="$(( longest_string + 4 ))"
#     for string in $(sudo cat "${VPN_DIR}"/ipp.txt); do
#         first_filed="$(printf '%s' "$string" | awk -F ',' '{print $1}' )"

#         if [[ "$(check_user "$first_filed")" == 'active' ]]; then
#             (( line_num++ ))

#             status='\e[2moffline\e[m'
#             sudo grep -wq "$first_filed" "${VPN_LOG_DIR}"/openvpn-status.log && status='\e[32monline\e[m'

#             second_field="$(printf '%s' "$string" | awk -F ',' '{print $2}' )"
#             first_filed_len=${#first_filed}
#             blank_field="$(( width_first_field - first_filed_len ))"
#             printf "%4s %s%*s%s\\t%b\\n" "${line_num})" "$first_filed" "$blank_field" '' "$second_field" "${status}"
#         fi
#     done
#     printf '%s\n' ''
# }
# def_vars
# case "$1" in
#     add) add_user "$2" ;;
#     block) revok_user "$2" ;;
#     useropt) user_options_edit "$2" ;;
#     userprof) user_profile_edit "$2" ;;
#     restart) restart_vpn ;;
#     start) start_vpn ;;
#     stop) stop_vpn ;;
#     config) vpn_config_edit ;;
#     log) show_vpn_log ;;
#     online) show_online ;;
#     users) show_users ;;
#     status) show_vpn_status ;;
#     *) help_err '1';;
# esac
#
# exit 0
# # ============ TO_MANAGER_END =====
